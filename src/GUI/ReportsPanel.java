package GUI;

import BL.Bill;
import BL.FullAppointment;
import BL.Hospital;
import BL.Patient;
import BL.Report;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class ReportsPanel extends javax.swing.JPanel {
    private Hospital hospitalManager;
    public ReportsPanel() {
        initComponents();
    }
    public ReportsPanel(Hospital hospital) {
        hospitalManager = hospital;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dwmButtonGroup = new javax.swing.ButtonGroup();
        reportsButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportsTable = new javax.swing.JTable();
        monthlyRB = new javax.swing.JRadioButton();
        weeklyRB = new javax.swing.JRadioButton();
        dailyRB = new javax.swing.JRadioButton();
        perDocRB = new javax.swing.JRadioButton();
        oldAndNewRB = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        feesTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        generateBtn = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reports"));

        reportsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Value 1", "Value 2"
            }
        ));
        jScrollPane1.setViewportView(reportsTable);

        dwmButtonGroup.add(monthlyRB);
        monthlyRB.setText("Monthly");

        dwmButtonGroup.add(weeklyRB);
        weeklyRB.setText("Weekly");

        dwmButtonGroup.add(dailyRB);
        dailyRB.setSelected(true);
        dailyRB.setText("Daily");

        reportsButtonGroup.add(perDocRB);
        perDocRB.setSelected(true);
        perDocRB.setText("Patients per doctor");

        reportsButtonGroup.add(oldAndNewRB);
        oldAndNewRB.setText("Old and new patients number");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monthlyRB)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dailyRB)
                            .addComponent(weeklyRB))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oldAndNewRB)
                            .addComponent(perDocRB))))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dailyRB)
                    .addComponent(perDocRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeklyRB)
                    .addComponent(oldAndNewRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthlyRB)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Fees Charged Daily"));

        feesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient", "Total Charged"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(feesTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        generateBtn.setText("Generate report");
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
       loadTables();
    }//GEN-LAST:event_generateBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton dailyRB;
    private javax.swing.ButtonGroup dwmButtonGroup;
    private javax.swing.JTable feesTable;
    private javax.swing.JButton generateBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton monthlyRB;
    private javax.swing.JRadioButton oldAndNewRB;
    private javax.swing.JRadioButton perDocRB;
    private javax.swing.ButtonGroup reportsButtonGroup;
    private javax.swing.JTable reportsTable;
    private javax.swing.JRadioButton weeklyRB;
    // End of variables declaration//GEN-END:variables

    private void loadTables() {
        try {
            loadFeesTable();
            loadReportsTable();
        } catch (SQLException ex) {
           //Logger.getLogger(ReportsPanel.class.getName()).log(Level.SEVERE, null, ex);
           new DBErrorDialog();
        }
    }

    private void loadFeesTable() {
        
        try {
            DefaultTableModel modelBasic = (DefaultTableModel) feesTable.getModel();
            modelBasic.setRowCount(0);
            ArrayList<Patient> patients = hospitalManager.getAllPatients();
            for (Patient patient : patients) {
                ArrayList<Bill> bills = hospitalManager.getBillsByPatientID(patient.getID(), true);
                double total = 0;
                int count = 0;
                for (Bill bill : bills) {
                    if (bill.getDate().isAfter(LocalDateTime.now().minusDays(1))) {
                        total += bill.getTotalPrice();
                        count++;
                    }
                }
                if (count >0) {
                    DefaultTableModel model = (DefaultTableModel) feesTable.getModel();
                    model.addRow(new Object[]{patient.getFullName(), total});
                }
                
            }
        } catch (SQLException ex) {
            //Logger.getLogger(ReportsPanel.class.getName()).log(Level.SEVERE, null, ex);
            new DBErrorDialog();
        }
    }

    private void loadReportsTable() throws SQLException {
        DefaultTableModel modelBasic = (DefaultTableModel) reportsTable.getModel();
        modelBasic.setRowCount(0);
        int days = 0;
        ArrayList<Report> reports = new ArrayList();
        if (dailyRB.isSelected()) {
            days = 1;
        }
        else if(weeklyRB.isSelected()){
            days = 7;
        }else{ days = 30;}
        
        if(perDocRB.isSelected()){
            reports = hospitalManager.getDoctorReport(days);
            for (Report report : reports) {
            DefaultTableModel model = (DefaultTableModel) reportsTable.getModel();
            model.addRow(new Object[]{report.getCol1(), report.getCol2()});
        }
        }
        else{
            loadNewOldPatientsReport(days);
        }
        
        
    }

    private void loadNewOldPatientsReport(int days) {
        try {
            ArrayList<Patient> allPatients = hospitalManager.getAllPatients();
           // ArrayList<FullAppointment> allAppointments = new ArrayList<>();
           int totalNew = 0;
           int totalOld = 0;
            for (Patient p : allPatients) {
               ArrayList<FullAppointment> allAppointments = (hospitalManager.getAllAppointmentsByPatient(p));
               boolean recent = false;
               int countTimes = 0;
                for (FullAppointment apt : allAppointments) {
                    if (apt.getDate().isAfter(LocalDateTime.now().minusDays(days))) {
                        recent = true;
                    }
                    if (apt.getDate().isBefore(LocalDateTime.now().minusDays(days))) {
                        countTimes++;
                    }
                }
                if (recent == true && countTimes == 0) {
                    totalNew++;
                }else if (recent == true && countTimes > 0) {
                    totalOld++;
                }
            }
            DefaultTableModel model = (DefaultTableModel) reportsTable.getModel();
            model.addRow(new Object[]{"New patients", totalNew});
            model.addRow(new Object[]{"Follow-up patients", totalOld});
            
            
        } catch (SQLException ex) {
           // Logger.getLogger(ReportsPanel.class.getName()).log(Level.SEVERE, null, ex);
           new DBErrorDialog();
        }
    }
}
